/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Flight as PrismaFlight,
  Booking as PrismaBooking,
} from "@prisma/client";

export class FlightServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FlightCountArgs, "select">): Promise<number> {
    return this.prisma.flight.count(args);
  }

  async flights<T extends Prisma.FlightFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FlightFindManyArgs>
  ): Promise<PrismaFlight[]> {
    return this.prisma.flight.findMany<Prisma.FlightFindManyArgs>(args);
  }
  async flight<T extends Prisma.FlightFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FlightFindUniqueArgs>
  ): Promise<PrismaFlight | null> {
    return this.prisma.flight.findUnique(args);
  }
  async createFlight<T extends Prisma.FlightCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FlightCreateArgs>
  ): Promise<PrismaFlight> {
    return this.prisma.flight.create<T>(args);
  }
  async updateFlight<T extends Prisma.FlightUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FlightUpdateArgs>
  ): Promise<PrismaFlight> {
    return this.prisma.flight.update<T>(args);
  }
  async deleteFlight<T extends Prisma.FlightDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FlightDeleteArgs>
  ): Promise<PrismaFlight> {
    return this.prisma.flight.delete(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.flight
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }
}
